(function(w,d){
    // ads manager object
    var MemeVideoAds = function (stageComponent, adComponent, player) {
        var adsManager;
        var adsLoader;
        var adDisplayContainer;
        var intervalTimer;

        var adsInfo;
        var currentAd;
        var fallbackIndex;
        var self = this;
        var timeout = 0;

        function createAdDisplayContainer() {
            // We assume the adContainer is the DOM id of the element that will house
            // the ads.
            if (adDisplayContainer || !w.google || !w.google.ima)
                return;
            adDisplayContainer =
                    new google.ima.AdDisplayContainer(adComponent.elementInner);
            adDisplayContainer.initialize();
        }

        this.loadAds = function (adInfo) {
            adsInfo = adInfo;
            fallbackIndex = 0;
            return this.requestAds(adInfo.index);
        };

        this.skip = function () {
            if (adsInfo.position === PREROLL || adsInfo.position === POSTROLL
                    || currentAd.type === VAST) {
                adsManager && adsManager.destroy();
                onContentResumeRequested();
            }
        };

        this.reset = function () {
            try {
                adsManager.destroy();
            } catch (e) {
            }
        };

        this.resize = function (w, h, mode) {
            if (w.google && adsManager) {
                adsManager.init(w, h, mode);
            }
        };

        this.requestAds = function (ad) {
            if (ad.type !== VAST && player.playInfo.isIframe){
                onAdError("Cannot run IMA ads in Iframe.");
                return;
            }
            currentAd = ad;
            // Create the ad display container.
            createAdDisplayContainer();
            // Initialize the container. Must be done via a user action on mobile devices.
            if (!adDisplayContainer) {
                onAdError("Ads display container is not found.");
                player.components.ad && player.components.ad.hide();
                return false;
            }
            player.components.ad && player.components.ad.show();
            // Create ads loader.
            adsLoader = new google.ima.AdsLoader(adDisplayContainer);
            // Listen and respond to ads loaded and error events.
            adsLoader.addEventListener(
                    google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,
                    onAdsManagerLoaded,
                    false);
            adsLoader.addEventListener(
                    google.ima.AdErrorEvent.Type.AD_ERROR,
                    onAdError,
                    false);

            // Request video ads.
            var adsRequest = new google.ima.AdsRequest();
            adsRequest.adTagUrl = ad.adtag;
            console.log("[MemePlayer]", "Ads load " + ad.adtag);
            // Specify the linear and nonlinear slot sizes. This helps the SDK to
            // select the correct creative if multiple are returned.
            if (adsInfo.position === MIDROLL) {
                adsRequest.nonLinearAdSlotWidth = player.size.stageWidth;
                adsRequest.nonLinearAdSlotHeight = 180;
            } else {
                adsRequest.linearAdSlotWidth = player.size.width;
                adsRequest.linearAdSlotHeight = player.size.height;
                adsRequest.nonLinearAdSlotWidth = player.size.width;
                adsRequest.nonLinearAdSlotHeight = player.size.height;
            }

            player.showAdContainer();
            try {
                adsLoader.requestAds(adsRequest);
                return true;
            } catch (e) {
                onAdError(e);
            }
            return false;
        };

        function onAdsManagerLoaded(adsManagerLoadedEvent) {
            // Get the ads manager.
            adsManager = adsManagerLoadedEvent.getAdsManager(
                    stageComponent.element);  // should be set to the content video element

            // Add listeners to the required events.
            adsManager.addEventListener(
                    google.ima.AdErrorEvent.Type.AD_ERROR,
                    onAdError);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,
                    onContentPauseRequested);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,
                    onContentResumeRequested);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.ALL_ADS_COMPLETED,
                    onAdEvent);

            // Listen to any additional events, if necessary.
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.LOADED,
                    onAdEvent);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.STARTED,
                    onAdEvent);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.COMPLETE,
                    onAdEvent);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.USER_CLOSE,
                    onAdEvent);
            adsManager.addEventListener(
                    google.ima.AdEvent.Type.CLICK,
                    onAdEvent);
            try {
                // Initialize the ads manager. Ad rules playlist will start at this time.
                adsManager.init(player.size.width, player.size.height,
                        adsInfo.position === MIDROLL ? google.ima.ViewMode.NORMAL : google.ima.ViewMode.FULLSCREEN);
                // Call play to start showing the ad. Single video and overlay ads will
                // start at this time; the call will be ignored for ad rules.
                adsManager.start();
            } catch (adError) {
                // An error may be thrown if there was a problem with the VAST response.
                onAdError();
//                videoContent.play();
            }
        }

        function onAdEvent(adEvent) {
            // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)
            // don't have ad object associated.
            var ad = adEvent.getAd();
            //console.log("[MemePlayer] AD EVENT", adEvent, ad, ad.getAdId());
            switch (adEvent.type) {
                case google.ima.AdEvent.Type.LOADED:
                    console.log("[MemePlayer]", "Ad loaded ", ad);
                    // This is the first event sent for an ad - it is possible to
                    // determine whether the ad is a video ad or an overlay.
                    player.showAdContainer();
                    if (!ad.isLinear()) {
                        // Position AdDisplayContainer correctly for overlay.
                        // Use ad.width and ad.height.
                        player.hideAdControls();
                        if (player.isPlaying) {

                        }
                        else {
                            player.setupLinearBanner(ad);
                        }
                    } else {
                        if (currentAd.type === VAST) {
                            player.showAdControls();
                        } else {
                            player.hideAdControls();
                        }
                    }
                    break;
                case google.ima.AdEvent.Type.STARTED:
                    // This event indicates the ad has started - the video player
                    // can adjust the UI, for example display a pause button and
                    // remaining time.
                    player.components.ad.preventOutsideCSS();
                    player.ping("ai", 0, {
                        adtag: currentAd.adtagId,
                        pos: adsInfo.position
                    });
                    if (ad.isLinear() || adsInfo.position !== MIDROLL) {
                        // For a linear ad, a timer can be started to poll for
                        // the remaining time.

                        var contentType = ad.getContentType();
                        if (contentType && contentType.indexOf("video") === 0) {
                            if (currentAd.type === VAST) {
                                player.playAd = true;
                            }
                            currentAd.skip = currentAd.skip || 5;
                            intervalTimer = setInterval(
                                    function () {
                                        var remainingTime = adsManager.getRemainingTime();
                                        player.trigger(EVENT.AD_COUNTDOWN, Math.floor(remainingTime));
                                        var playTime = ad.getDuration() - remainingTime;
                                        if (currentAd.skip && playTime < currentAd.skip)
                                            player.trigger(EVENT.AD_SKIPCOUNTDOWN, Math.floor(currentAd.skip - playTime));
                                        else
                                            player.trigger(EVENT.AD_SKIPCOUNTDOWN, 0);
                                    },
                                    300); // every 300ms
                            player.setupLinearVideo();
                        } else {
                            player.setupLinearBanner(ad);
                            timeout = setTimeout(onContentResumeRequested, adsInfo.position === PREROLL ? 20000 : 30000);
                        }
                    }
                    break;
                case google.ima.AdEvent.Type.CLICK:
                    player.ping("ac", 0, {
                        adtag: currentAd.adtagId,
                        pos: adsInfo.position
                    });
                    break;
                case google.ima.AdEvent.Type.COMPLETE:
                    // This event indicates the ad has finished - the video player
                    // can perform appropriate UI actions, such as removing the timer for
                    // remaining time detection.
                    console.log("[MemePlayer]", "Ads complete");
                    clearInterval(intervalTimer);
                    player.setupPlayingNonLinear();

                    if (adsInfo.position !== MIDROLL) {
                        onContentResumeRequested();
                    }
                    break;
                case google.ima.AdEvent.Type.USER_CLOSE:
                    console.log("[MemePlayer]", "Ads close");
                    if (adsInfo.position !== MIDROLL) {
                        onContentResumeRequested();
                    }
                    clearInterval(intervalTimer);
                    break;
            }
        }

        function onAdError(adErrorEvent) {
            if (!adDisplayContainer) {
                onContentResumeRequested();
                return;
            }
            // Handle the error logging.
            if (adErrorEvent && adErrorEvent.stack)
                console.log("[MemePlayer]", "AD ERROR", adErrorEvent, adErrorEvent.stack);
            else
                console.log("[MemePlayer]", "AD ERROR", adErrorEvent);
            adsManager && adsManager.destroy();
            if (adsInfo.replace && adsInfo.replace.length && fallbackIndex < adsInfo.replace.length) {
                fallbackIndex++;
                self.requestAds(adsInfo.replace[fallbackIndex - 1]);
            } else {
                onContentResumeRequested();
            }

        }

        function onContentPauseRequested() {
            pause(player);
        }

        function onContentResumeRequested() {
            clearTimeout(timeout);
            player.hideAdControls();
            player.hideAdContainer();
            player.setupPlayingNonLinear();
            clearInterval(intervalTimer);
            player.playAd = false;
            if (adsInfo.position !== POSTROLL)
                play(player);
            else player.components.load.show();
            if (adsInfo.position !== MIDROLL) {
                self.reset();
            }
        }


    };
   w.MemeVideoAds=MemeVideoAds;
})(window,document);